#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <DHT.h>
#include <Adafruit_Sensor.h>
#include <PubSubClient.h>
#include <WiFi.h>

#define DHTPIN 19
#define DHTTYPE DHT22
#define LDRPIN 25
#define VARPIN 26
#define LEDPIN 18

// Change the credentials below, so your ESP8266 connects to your router
const char* ssid = "Azurix.exe";
const char* password = "CH3COOCH2CH3";


// Change the variable to your Raspberry Pi IP address, so it connects to your MQTT broker
const char* mqtt_server = "test.mosquitto.org";
//For example
//const char* mqtt_server = "192.168.1.106";

// Initializes the espClient. You should change the espClient name if you have multiple ESPs running in your home automation system
WiFiClient espClient;
PubSubClient client(espClient);

DHT dht(DHTPIN, DHTTYPE);
Adafruit_SSD1306 display(128, 64, &Wire, -1);

// This functions connects your ESP8266 to your router
void setup_wifi() {
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("WiFi connected - ESP IP address: ");
  Serial.println(WiFi.localIP());
}

// This function is executed when some device publishes a message to a topic that your ESP8266 is subscribed to
// Change the function below to add logic to your program, so when a device publishes a message to a topic that 
// your ESP8266 is subscribed you can actually do something
void callback(String topic, byte* message, unsigned int length) {
  Serial.print("Message arrived on topic: ");
  Serial.print(topic);
  Serial.print(". Message: ");
  String messageTemp;
  
  for (int i = 0; i < length; i++) {
    Serial.print((char)message[i]);
    messageTemp += (char)message[i];
  }
  Serial.println();

  // Feel free to add more if statements to control more GPIOs with MQTT

  Serial.println();
}

// This functions reconnects your ESP8266 to your MQTT broker
// Change the function below if you want to subscribe to more topics with your ESP8266 
void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    /*
     YOU MIGHT NEED TO CHANGE THIS LINE, IF YOU'RE HAVING PROBLEMS WITH MQTT MULTIPLE CONNECTIONS
     To change the ESP device ID, you will have to give a new name to the ESP8266.
     Here's how it looks:
       if (client.connect("ESP8266Client")) {
     You can do it like this:
       if (client.connect("ESP1_Office")) {
     Then, for the other ESP:
       if (client.connect("ESP2_Garage")) {
      That should solve your MQTT multiple connections problem
    */
    if (client.connect("ESP32Client", "", "")) {
      Serial.println("connected");  
      // Subscribe or resubscribe to a topic
      // You can subscribe to more topics (to control more LEDs in this example)
      client.subscribe("AIR2223_Temp");
      client.subscribe("AIR2223_humid");
      client.subscribe("AIR2223_brightness");
      client.subscribe("AIR2223_soil_moisture");
      client.subscribe("AIR2223_LEDStatus");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}


void setup() {
  Serial.begin(9600);

  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  pinMode(LEDPIN, OUTPUT);
  dht.begin();

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  if(!client.loop())
    client.connect("ESP32Client");

float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();
  int brightness = analogRead(LDRPIN);
  int brightnesslevel = map(brightness, 0, 1500, 0, 100);
  if (brightnesslevel > 100){
    brightnesslevel = 100;
  }
  int varValue = analogRead(VARPIN);

  int currentPercentage = map(varValue, 0, 4095, 0, 100);

  if (currentPercentage < 30) {
    digitalWrite(LEDPIN, HIGH);
  } else if (currentPercentage > 65) {
    digitalWrite(LEDPIN, LOW);
  }

  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("Noddy Farming System");
  display.setCursor(0, 10);
  display.print("Temp: ");
  display.print(temperature);
  display.print(" C");
  display.setCursor(0, 20);
  display.print("Humidity: ");
  display.print(humidity);
  display.print(" %");
  display.setCursor(0, 30);
  display.print("Brightness: ");
  display.print(brightnesslevel);
  display.print(" %");  
  display.setCursor(0, 40);
  display.print("Soil Moisture: ");
  display.print(currentPercentage);
  display.print(" %");
  display.display();

  delay(1000);

      //Publishes Temperature and Humidity values
    client.publish("AIR2223_Temp", String(temperature).c_str());
    client.publish("AIR2223_humid", String(humidity).c_str());
    client.publish("AIR2223_brightness", String(brightnesslevel).c_str());
    client.publish("AIR2223_soil_moisture", String(currentPercentage).c_str());
    client.publish("AIR2223_LEDStatus", String().c_str());
}
